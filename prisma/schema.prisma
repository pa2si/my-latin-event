datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String     @id @default(uuid())
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  slogan       String?
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  events       Event[]
  favorites    Favorite[]
  reviews      Review[]
  bookings     Booking[]
  following    Follow[] @relation("followers") 
  followers    Follow[] @relation("following") 
}

model Event {
  id                  String     @id @default(uuid())
  name                String
  subtitle            String?
  location            String
  city                String
  street              String
  postalCode          String?
  country             String
  googleMapsLink      String?
  genre               String
  styles              String
  image               String
  description         String?
  price               Int
  floors              Int
  bars                Int
  outdoorAreas        Int
  eventDateAndTime    DateTime
  eventEndDateAndTime DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  profile             Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId           String
  favorites           Favorite[]
  reviews             Review[]
  bookings            Booking[]
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

}

model Review {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id            String   @id @default(uuid())
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String
  event         Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String
  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Follow {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  follower    Profile  @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  
  following   Profile  @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}