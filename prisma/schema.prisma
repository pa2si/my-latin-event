datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}
generator client {
  provider = "prisma-client-js"
}
model Profile {
  id           String     @id @default(uuid())
  clerkId      String     @unique
  firstName    String?
  lastName     String?
  username     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // One profile can have multiple organizer profiles
  organizers   Organizer[]
  // User activities
  likes        Like[]    
  reviews      Review[]
  bookings     Booking[]
  following    Follow[]
  userCountry  String
  userState    String
  userCity     String?
}
model Organizer {
  id             String   @id @default(uuid())
  organizerName  String
  organizerImage String
  slogan         String?
  contactEmail     String?
  contactWebsite   String?
  contactPhone     String?
  contactSocialMedia String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // Relation to profile
  profile        Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId      String
  // Organizer content
  events         Event[]

  // Followers
  followers      Follow[]
  @@unique([profileId, organizerName]) // Prevents duplicate organizer names per profile
}
model Event {
  id                  String     @id @default(uuid())
  name                String
  subtitle            String?
  location            String
  city                String
  street              String
  postalCode          String?
  country             String
  googleMapsLink      String?
  ticketLink          String? 
  genres              String[] 
  styles              String[] 
  image               String
  description         String?
  price               String    // Changed from Int? to String
  floors              Int
  bars                Int
  outdoorAreas        Int
  eventDateAndTime    DateTime
  eventEndDateAndTime DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  organizer           Organizer  @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId         String

  likes               Like[]    
  reviews             Review[]
  bookings            Booking[]
}
model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
}
model Review {
  id        String   @id @default(uuid())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String

  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Booking {
  id            String   @id @default(uuid())
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String

  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String

  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model Follow {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String

  organizer   Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId String

  @@unique([profileId, organizerId])
}